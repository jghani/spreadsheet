{"version":3,"sources":["Components/Cell/Cell.js","Components/Row/Row.js","Components/SpreadSheet/SpreadSheet.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","onChange","e","setState","value","target","display","determineDisplay","x","y","onKeyPressOnInput","key","hasNewValue","onKeyPressOnSpan","state","editing","onBlur","handleUnselectAll","selected","onChangedValue","emitUnselectAllEvent","unselectAllEvent","Event","window","document","dispatchEvent","clicked","timer","setTimeout","prevent","delay","doubleClicked","clearTimeout","slice","res","executeFormula","error","result","calculateCss","css","width","padding","margin","height","boxSizing","position","color","border","textAlign","verticalAlign","fontSize","lineHeight","overflow","backgroundColor","fontWeight","addEventListener","this","removeEventListener","nextProps","nextState","style","alpha","split","onKeyPress","role","outlineColor","outlineStyle","type","autoFocus","onClick","onDoubleClick","React","Component","Row","cells","push","handleChangedCell","updateCells","rowData","SpreadSheet","cell","parser","parse","toString","modifiedData","Object","assign","data","forceUpdate","FormulaParser","on","cellCoord","done","column","index","row","Error","ERROR_NOT_AVAILABLE","ERROR_REF","startCellCoord","endCellCoord","sx","sy","ex","ey","fragment","colFragment","rows","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6d702ddc.chunk.js","sourcesContent":["import React from 'react'\n/**\n * Cell represents the atomic element of a table\n */\nexport default class Cell extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing: false,\n      value: props.value,\n    }\n    this.display = this.determineDisplay(\n      { x: props.x, y: props.y },\n      props.value\n    )\n    this.timer = 0\n    this.delay = 200\n    this.prevent = false\n  }\n  /**\n   * Add listener to the `unselectAll` event used to broadcast the\n   * unselect all event\n   */\n  componentDidMount() {\n    window.document.addEventListener('unselectAll',\n      this.handleUnselectAll)\n  }\n\n  /**\n   * Before updating, execute the formula on the Cell value to\n   * calculate the `display` value. Especially useful when a\n   * redraw is pushed upon this cell when editing another cell\n   * that this might depend upon\n   */\n  componentWillUpdate() {\n    this.display = this.determineDisplay(\n      { x: this.props.x, y: this.props.y }, this.state.value)\n  }\n\n  /**\n   * This remove the `unselectAll` event listener added in\n   * `componentDidMount()`\n   */\n  componentWillUnmount() {\n    window.document.removeEventListener('unselectAll',\n      this.handleUnselectAll)\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Has a formula value? could be affected by any change. Update\n    if (this.state.value !== '' &&\n      this.state.value.slice(0, 1) === '=') {\n      return true\n    }\n    // Its own state values changed? Update\n    // Its own value prop changed? Update\n    if (nextState.value !== this.state.value ||\n      nextState.editing !== this.state.editing ||\n      nextState.selected !== this.state.selected ||\n      nextProps.value !== this.props.value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * When a Cell value changes, re-determine the display value\n   * by calling the formula calculation\n   */\n  onChange = (e) => {\n    this.setState({ value: e.target.value })\n    this.display = this.determineDisplay(\n      { x: this.props.x, y: this.props.y }, e.target.value)\n  }\n\n  /**\n   * Handle pressing a key when the Cell is an input element\n   */\n  onKeyPressOnInput = (e) => {\n    if (e.key === 'Enter') {\n      this.hasNewValue(e.target.value)\n    }\n  }\n\n  /**\n   * Handle pressing a key when the Cell is a span element,\n   * not yet in editing mode\n   */\n  onKeyPressOnSpan = () => {\n    if (!this.state.editing) {\n      this.setState({ editing: true })\n    }\n  }\n\n  /**\n   * Handle moving away from a cell, stores the new value\n   */\n  onBlur = (e) => {\n    this.hasNewValue(e.target.value)\n  }\n\n  /**\n   * Used by `componentDid(Un)Mount`, handles the `unselectAll`\n   * event response\n   */\n  handleUnselectAll = () => {\n    if (this.state.selected || this.state.editing) {\n      this.setState({ selected: false, editing: false })\n    }\n  }\n\n  /**\n   * Called by the `onBlur` or `onKeyPressOnInput` event handlers,\n   * it escalates the value changed event, and restore the editing\n   * state to `false`.\n   */\n  hasNewValue = (value) => {\n    this.props.onChangedValue(\n      {\n        x: this.props.x,\n        y: this.props.y,\n      },\n      value,\n    )\n    this.setState({ editing: false })\n  }\n\n  /**\n   * Emits the `unselectAll` event, used to tell all the other\n   * cells to unselect\n   */\n  emitUnselectAllEvent = () => {\n    const unselectAllEvent = new Event('unselectAll')\n    window.document.dispatchEvent(unselectAllEvent)\n  }\n\n  /**\n   * Handle clicking a Cell.\n   */\n  clicked = () => {\n    // Prevent click and double click to conflict\n    this.timer = setTimeout(() => {\n      if (!this.prevent) {\n        // Unselect all the other cells and set the current\n        // Cell state to `selected`\n        this.emitUnselectAllEvent()\n        this.setState({ selected: true })\n      }\n      this.prevent = false\n    }, this.delay)\n  }\n\n  /**\n   * Handle doubleclicking a Cell.\n   */\n  doubleClicked = () => {\n    // Prevent click and double click to conflict\n    clearTimeout(this.timer)\n    this.prevent = true\n    // Unselect all the other cells and set the current\n    // Cell state to `selected` & `editing`\n    this.emitUnselectAllEvent()\n    this.setState({ editing: true, selected: true })\n  }\n\n  determineDisplay = ({ x, y }, value) => {\n    if (value.slice(0, 1) === '=') {\n      const res = this.props.executeFormula({ x, y }, value.slice(1))\n      if (res.error !== null) {\n        return 'INVALID'\n      }\n      return res.result\n    }\n    return value\n  }\n  /**\n   * Calculates a cell's CSS values\n   */\n  calculateCss = () => {\n    const css = {\n      width: '80px',\n      padding: '4px',\n      margin: '0',\n      height: '25px',\n      boxSizing: 'border-box',\n      position: 'relative',\n      display: 'inline-block',\n      color: 'black',\n      border: '1px solid #cacaca',\n      textAlign: 'left',\n      verticalAlign: 'top',\n      fontSize: '14px',\n      lineHeight: '15px',\n      overflow: 'hidden',\n    }\n    if (this.props.x === 0 || this.props.y === 0) {\n      css.textAlign = 'center'\n      css.backgroundColor = '#f0f0f0'\n      css.fontWeight = 'bold'\n    }\n    return css\n  }\n  render() {\n    const css = this.calculateCss()\n    // column 0\n    if (this.props.x === 0) {\n      return (\n        <span style={css}>\n          {this.props.y}\n        </span>\n      )\n    }\n    // row 0\n    if (this.props.y === 0) {\n      const alpha = ' abcdefghijklmnopqrstuvwxyz'.split('')\n      return (\n        <span\n          onKeyPress={this.onKeyPressOnSpan}\n          style={css}\n          role=\"presentation\">\n          {alpha[this.props.x]}\n        </span>\n      )\n    }\n    if (this.state.selected) {\n      css.outlineColor = 'lightblue'\n      css.outlineStyle = 'dotted'\n    }\n    if (this.state.editing) {\n      return (\n        <input\n          style={css}\n          type=\"text\"\n          onBlur={this.onBlur}\n          onKeyPress={this.onKeyPressOnInput}\n          value={this.state.value}\n          onChange={this.onChange}\n          autoFocus\n        />\n      )\n    }\n    return (\n      <span\n        onClick={e => this.clicked(e)}\n        onDoubleClick={e => this.doubleClicked(e)}\n        style={css}\n        role=\"presentation\"\n      >\n        {this.display}\n      </span>\n    )\n  }\n}","import React from 'react'\nimport Cell from '../Cell/Cell'\nconst Row = props => {\n  const cells = []\n  const y = props.y\n  for (let x = 0; x < props.x; x += 1) {\n    cells.push(\n      <Cell\n        key={`${x}-${y}`}\n        y={y}\n        x={x}\n        onChangedValue={props.handleChangedCell}\n        updateCells={props.updateCells}\n        value={props.rowData[x] || ''}\n        executeFormula={props.executeFormula}\n      />,\n    )\n  }\n  return <div>{cells}</div>\n}\nexport default Row","import React, { Component } from \"react\";\n\nimport { Parser as FormulaParser } from 'hot-formula-parser'\n\nimport Row from \"../Row/Row\";\n\nclass SpreadSheet extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: {}\n    }\n    this.parser = new FormulaParser();\n\n    // When a formula contains a cell value, this event lets us\n    // hook and return an error value if necessary\n    this.parser.on('callCellValue', (cellCoord, done) => {\n      const x = cellCoord.column.index + 1\n      const y = cellCoord.row.index + 1\n      // Check if I have that coordinates tuple in the table range\n      if (x > this.props.x || y > this.props.y) {\n        throw this.parser.Error(this.parser.ERROR_NOT_AVAILABLE)\n      }\n      // Check that the cell is not self referencing\n      if (this.parser.cell.x === x && this.parser.cell.y === y) {\n        throw this.parser.Error(this.parser.ERROR_REF)\n      }\n      if (!this.state.data[y] || !this.state.data[y][x]) {\n        return done('')\n      }\n      // All fine\n      return done(this.state.data[y][x])\n    })\n\n    // When a formula contains a range value, this event lets us\n    // hook and return an error value if necessary\n    this.parser.on('callRangeValue',\n      (startCellCoord, endCellCoord, done) => {\n        const sx = startCellCoord.column.index + 1\n        const sy = startCellCoord.row.index + 1\n        const ex = endCellCoord.column.index + 1\n        const ey = endCellCoord.row.index + 1\n        const fragment = []\n        for (let y = sy; y <= ey; y += 1) {\n          const row = this.state.data[y]\n          if (!row) {\n            continue\n          }\n          const colFragment = []\n          for (let x = sx; x <= ex; x += 1) {\n            let value = row[x]\n            if (!value) {\n              value = ''\n            }\n            if (value.slice(0, 1) === '=') {\n              const res = this.executeFormula({ x, y },\n                value.slice(1))\n              if (res.error) {\n                throw this.parser.Error(res.error)\n              }\n              value = res.result\n            }\n            colFragment.push(value)\n          }\n          fragment.push(colFragment)\n        }\n        if (fragment) {\n          done(fragment)\n        }\n      })\n  }\n\n  executeFormula = (cell, value) => {\n    this.parser.cell = cell\n    let res = this.parser.parse(value)\n    if (res.error != null) {\n      return res // tip: returning `res.error` shows more details\n    }\n    if (res.result.toString() === '') {\n      return res\n    }\n    if (res.result.toString().slice(0, 1) === '=') {\n      // formula points to formula\n      res = this.executeFormula(cell, res.result.slice(1))\n    }\n    return res\n  }\n\n  handleChangedCell = ({ x, y }, value) => {\n    const modifiedData = Object.assign({}, this.state.data)\n    if (!modifiedData[y]) modifiedData[y] = {}\n    modifiedData[y][x] = value\n    this.setState({ data: modifiedData })\n  }\n\n  updateCells = () => {\n    this.forceUpdate()\n  }\n\n  render() {\n    const rows = []\n    for (let y = 0; y < this.props.y + 1; y += 1) {\n      const rowData = this.state.data[y] || {}\n      rows.push(\n        <Row\n          handleChangedCell={this.handleChangedCell}\n          executeFormula={this.executeFormula}\n          updateCells={this.updateCells}\n          key={y}\n          y={y}\n          x={this.props.x + 1}\n          rowData={rowData}\n        />\n      )\n    }\n    return <div>{rows}</div>\n  }\n}\n\nexport default SpreadSheet;\n","import React from 'react';\nimport './App.css';\nimport SpreadSheet from \"./Components/SpreadSheet/SpreadSheet\";\n\nfunction App() {\n  return (\n    <div style={{ width: 'max-content' }}>\n      <SpreadSheet x={26} y={50} />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}